// Uses Declarative syntax to run commands inside a container.
pipeline {
   environment {
      monitoringNS = "monitoring"
   
      rabbitMqServerURL = "rabbit-mq.local"
      rabbitMqServerPort = "5672"
      rabbitMqNamespace = "default"
      rabbitMqHelmDeployName = "my-rabbit"

      rabbitMqProducerMessage = "Hello"
      rabbitMqProducerTimesToRepeat = "30"
      
      gitProjectName = "k8s-project"
      gitProjectURL = "https://github.com/ohadm2/k8s-project.git"
      
      producerHelmDeployName = "my-producer"
      consumerHelmDeployName = "my-consumer"
      
   }
    agent {
        kubernetes {
            // Rather than inline YAML, in a multibranch Pipeline you could use: yamlFile 'jenkins-pod.yaml'
            // Or, to avoid YAML:
            // containerTemplate {
            //     name 'shell'
            //     image 'ubuntu'
            //     command 'sleep'
            //     args 'infinity'
            // }
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: helm-kubectl
    image: dtzar/helm-kubectl
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
'''
            // Can also wrap individual steps:
            // container('shell') {
            //     sh 'hostname'
            // }
            defaultContainer 'helm-kubectl'
        }
    }
    stages {
        stage('general') {
          steps {
            sh '''
            
              apk update
              apk add coreutils
             
            ''' 
          }
        }
        stage('get-helm-charts') {
            steps {
                sh ''' 
                    apk add git
                    git clone ${gitProjectURL}
                '''
            }
        }
        stage('deploy helm charts') {
            steps {
                withKubeConfig([credentialsId: 'minikube-crt', serverUrl: 'https://192.168.49.2:8443', clusterName: 'minikube']) {
                
                  sh ''' 
                     
                    apk add curl
                 
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    
                    chmod u+x ./kubectl
                    
                    mv ./kubectl /bin/
                    # for testing access
                    kubectl get ns
                    
                    kubectl create ns ${monitoringNS} || true
                    
                    cd ${gitProjectName}
                    
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                    helm repo add kube-state-metrics https://kubernetes.github.io/kube-state-metrics
                    helm upgrade -i prometheus prometheus-community/prometheus --namespace monitoring -f prometheus/values.yml
                    
                    helm repo add bitnami https://charts.bitnami.com/bitnami
                    
                    RABBITMQ_PASSWORD=$(kubectl get secret --namespace "${rabbitMqNamespace}" ${rabbitMqHelmDeployName}-rabbitmq -o jsonpath="{.data.rabbitmq-password}" | base64 --decode)
                    RABBITMQ_ERLANG_COOKIE=$(kubectl get secret --namespace "${rabbitMqNamespace}" ${rabbitMqHelmDeployName}-rabbitmq -o jsonpath="{.data.rabbitmq-erlang-cookie}" | base64 --decode)
                    
                    helm upgrade -i ${rabbitMqHelmDeployName} bitnami/rabbitmq --set ingress.enabled=true,ingress.hostname=${rabbitMqServerURL},service.port=${rabbitMqServerPort},metrics.enabled=true,auth.password=RABBITMQ_PASSWORD,auth.erlangCookie=RABBITMQ_ERLANG_COOKIE,podLabels.server-type=rabbit-mq-server
                    
                    helm upgrade -i ${producerHelmDeployName} ./producer-helm-chart --set port=${rabbitMqServerPort},server=${rabbitMqServerURL},message=${rabbitMqProducerMessage},repeat=${rabbitMqProducerTimesToRepeat}
                    
                    helm upgrade -i $(consumerHelmDeployName) ./consumer-helm-chart --set port=${rabbitMqServerPort},server=${rabbitMqServerURL}
                  
                  
                  '''
                
                }
            }
        }
    }
}    
